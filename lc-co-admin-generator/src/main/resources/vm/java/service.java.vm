package ${packageName}.service;

import ${packageName}.entities.entity.${ClassName};
import ${packageName}.entities.bo.${ClassName}Bo;
import org.lc.admin.system.entities.request.${ClassName}Request;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
 * Description: ${functionName}service服务接口
 *
 * @author ${author}
 * @version 1.0.0
 * @date ${dateTime}
 */
public interface ${ClassName}Service {

    /**
     * Description: 根据请求参数查询${functionName}列表数据
     *
     * @param requestParam 请求参数
     * @return {@link List }<{@link ${ClassName} }> ${functionName}列表数据
     * @date ${dateTime}
     */
    List<${ClassName}> select${ClassName}List(${ClassName}Request requestParam);

    /**
     * Description: 根据${functionName}主键查询${functionName}数据
     *
     * @param ${pkColumn.javaField}  ${functionName}主键
     * @return {@link ${ClassName} } ${functionName}数据
     * @date ${dateTime}
     */
    ${ClassName} select${ClassName}By${pkColumn.fieldAlias}(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * Description: 根据请求参数添加${functionName}数据
     *
     * @param requestParam 请求参数
     * @return {@link Integer } 记录数
     * @date ${dateTime}
     */
    Integer add${ClassName}(${ClassName}Request requestParam);

    /**
     * Description: 插入${functionName}数据
     *
     * @param requestParam 请求参数
     * @return {@link Integer } 记录数
     * @date ${dateTime}
     */
    Integer insert${ClassName}(${ClassName}Request requestParam);

    /**
     * Description: 根据${functionName}插入${functionName}数据
     *
     * @param  ${className} ${functionName}数据
     * @return {@link Integer } 记录数
     * @date ${dateTime}
     */
    Integer insert${ClassName}(${ClassName} ${className});

    /**
     * Description: 编辑${functionName}数据
     *
     * @param requestParam 请求参数
     * @return {@link Integer } 记录数
     * @date ${dateTime}
     */
    Integer edit${ClassName}(${ClassName}Request requestParam);


    /**
     * Description: 更新${functionName}数据
     *
     * @param requestParam 请求参数
     * @return {@link Integer } 记录数
     * @date ${dateTime}
     */
    Integer update${ClassName}(${ClassName}Request requestParam);

    /**
     * Description:  根据${functionName}更新${functionName}数据
     *
     * @param ${className} ${functionName}数据
     * @return {@link Integer } 记录数
     * @date ${dateTime}
     */
    Integer update${ClassName}(${ClassName} ${className});

    /**
     * Description: 根据请求参数查询${functionName}bo列表数据
     *
     * @param requestParam 请求参数
     * @return {@link List }<{@link ${ClassName}Bo }> ${functionName}bo列表
     * @date ${dateTime}
     */
    List<${ClassName}Bo> select${ClassName}BoList(${ClassName}Request requestParam);

    /**
     * Description: 根据请求参数导出${functionName}列表数据
     *
     * @param requestParam 请求参数
     * @param response     响应
     * @throws IOException io异常
     * @date ${dateTime}
     */
    void export(${ClassName}Request requestParam, HttpServletResponse response) throws IOException;

    /**
     * Description: 根据${functionName}主键删除${functionName}数据
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return {@link Integer } 记录数
     * @date ${dateTime}
     */
    Integer delete${ClassName}By${pkColumn.fieldAlias}(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * Description: 根据${functionName}主键列表删除${functionName}数据
     *
     * @param ${pkColumn.javaField}s ${functionName}主键列表
     * @return {@link Integer } 记录数
     * @date ${dateTime}
     */
    Integer delete${ClassName}By${pkColumn.fieldAlias}s(List<${pkColumn.javaType}> ${pkColumn.javaField}s);
    

}